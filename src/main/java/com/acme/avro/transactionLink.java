/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.acme.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class transactionLink extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7021443047947320159L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"transactionLink\",\"namespace\":\"com.acme.avro\",\"fields\":[{\"name\":\"linkStoreId\",\"type\":\"string\"},{\"name\":\"linkWorkstationId\",\"type\":\"string\"},{\"name\":\"linkDate\",\"type\":\"string\"},{\"name\":\"linkSequenceNumber\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<transactionLink> ENCODER =
      new BinaryMessageEncoder<transactionLink>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<transactionLink> DECODER =
      new BinaryMessageDecoder<transactionLink>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<transactionLink> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<transactionLink> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<transactionLink>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this transactionLink to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a transactionLink from a ByteBuffer. */
  public static transactionLink fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence linkStoreId;
  @Deprecated public java.lang.CharSequence linkWorkstationId;
  @Deprecated public java.lang.CharSequence linkDate;
  @Deprecated public int linkSequenceNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public transactionLink() {}

  /**
   * All-args constructor.
   * @param linkStoreId The new value for linkStoreId
   * @param linkWorkstationId The new value for linkWorkstationId
   * @param linkDate The new value for linkDate
   * @param linkSequenceNumber The new value for linkSequenceNumber
   */
  public transactionLink(java.lang.CharSequence linkStoreId, java.lang.CharSequence linkWorkstationId, java.lang.CharSequence linkDate, java.lang.Integer linkSequenceNumber) {
    this.linkStoreId = linkStoreId;
    this.linkWorkstationId = linkWorkstationId;
    this.linkDate = linkDate;
    this.linkSequenceNumber = linkSequenceNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return linkStoreId;
    case 1: return linkWorkstationId;
    case 2: return linkDate;
    case 3: return linkSequenceNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: linkStoreId = (java.lang.CharSequence)value$; break;
    case 1: linkWorkstationId = (java.lang.CharSequence)value$; break;
    case 2: linkDate = (java.lang.CharSequence)value$; break;
    case 3: linkSequenceNumber = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'linkStoreId' field.
   * @return The value of the 'linkStoreId' field.
   */
  public java.lang.CharSequence getLinkStoreId() {
    return linkStoreId;
  }

  /**
   * Sets the value of the 'linkStoreId' field.
   * @param value the value to set.
   */
  public void setLinkStoreId(java.lang.CharSequence value) {
    this.linkStoreId = value;
  }

  /**
   * Gets the value of the 'linkWorkstationId' field.
   * @return The value of the 'linkWorkstationId' field.
   */
  public java.lang.CharSequence getLinkWorkstationId() {
    return linkWorkstationId;
  }

  /**
   * Sets the value of the 'linkWorkstationId' field.
   * @param value the value to set.
   */
  public void setLinkWorkstationId(java.lang.CharSequence value) {
    this.linkWorkstationId = value;
  }

  /**
   * Gets the value of the 'linkDate' field.
   * @return The value of the 'linkDate' field.
   */
  public java.lang.CharSequence getLinkDate() {
    return linkDate;
  }

  /**
   * Sets the value of the 'linkDate' field.
   * @param value the value to set.
   */
  public void setLinkDate(java.lang.CharSequence value) {
    this.linkDate = value;
  }

  /**
   * Gets the value of the 'linkSequenceNumber' field.
   * @return The value of the 'linkSequenceNumber' field.
   */
  public java.lang.Integer getLinkSequenceNumber() {
    return linkSequenceNumber;
  }

  /**
   * Sets the value of the 'linkSequenceNumber' field.
   * @param value the value to set.
   */
  public void setLinkSequenceNumber(java.lang.Integer value) {
    this.linkSequenceNumber = value;
  }

  /**
   * Creates a new transactionLink RecordBuilder.
   * @return A new transactionLink RecordBuilder
   */
  public static com.acme.avro.transactionLink.Builder newBuilder() {
    return new com.acme.avro.transactionLink.Builder();
  }

  /**
   * Creates a new transactionLink RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new transactionLink RecordBuilder
   */
  public static com.acme.avro.transactionLink.Builder newBuilder(com.acme.avro.transactionLink.Builder other) {
    return new com.acme.avro.transactionLink.Builder(other);
  }

  /**
   * Creates a new transactionLink RecordBuilder by copying an existing transactionLink instance.
   * @param other The existing instance to copy.
   * @return A new transactionLink RecordBuilder
   */
  public static com.acme.avro.transactionLink.Builder newBuilder(com.acme.avro.transactionLink other) {
    return new com.acme.avro.transactionLink.Builder(other);
  }

  /**
   * RecordBuilder for transactionLink instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<transactionLink>
    implements org.apache.avro.data.RecordBuilder<transactionLink> {

    private java.lang.CharSequence linkStoreId;
    private java.lang.CharSequence linkWorkstationId;
    private java.lang.CharSequence linkDate;
    private int linkSequenceNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.acme.avro.transactionLink.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.linkStoreId)) {
        this.linkStoreId = data().deepCopy(fields()[0].schema(), other.linkStoreId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkWorkstationId)) {
        this.linkWorkstationId = data().deepCopy(fields()[1].schema(), other.linkWorkstationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.linkDate)) {
        this.linkDate = data().deepCopy(fields()[2].schema(), other.linkDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.linkSequenceNumber)) {
        this.linkSequenceNumber = data().deepCopy(fields()[3].schema(), other.linkSequenceNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing transactionLink instance
     * @param other The existing instance to copy.
     */
    private Builder(com.acme.avro.transactionLink other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.linkStoreId)) {
        this.linkStoreId = data().deepCopy(fields()[0].schema(), other.linkStoreId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkWorkstationId)) {
        this.linkWorkstationId = data().deepCopy(fields()[1].schema(), other.linkWorkstationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.linkDate)) {
        this.linkDate = data().deepCopy(fields()[2].schema(), other.linkDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.linkSequenceNumber)) {
        this.linkSequenceNumber = data().deepCopy(fields()[3].schema(), other.linkSequenceNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'linkStoreId' field.
      * @return The value.
      */
    public java.lang.CharSequence getLinkStoreId() {
      return linkStoreId;
    }

    /**
      * Sets the value of the 'linkStoreId' field.
      * @param value The value of 'linkStoreId'.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder setLinkStoreId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.linkStoreId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'linkStoreId' field has been set.
      * @return True if the 'linkStoreId' field has been set, false otherwise.
      */
    public boolean hasLinkStoreId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'linkStoreId' field.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder clearLinkStoreId() {
      linkStoreId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkWorkstationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getLinkWorkstationId() {
      return linkWorkstationId;
    }

    /**
      * Sets the value of the 'linkWorkstationId' field.
      * @param value The value of 'linkWorkstationId'.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder setLinkWorkstationId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.linkWorkstationId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'linkWorkstationId' field has been set.
      * @return True if the 'linkWorkstationId' field has been set, false otherwise.
      */
    public boolean hasLinkWorkstationId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'linkWorkstationId' field.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder clearLinkWorkstationId() {
      linkWorkstationId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getLinkDate() {
      return linkDate;
    }

    /**
      * Sets the value of the 'linkDate' field.
      * @param value The value of 'linkDate'.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder setLinkDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.linkDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'linkDate' field has been set.
      * @return True if the 'linkDate' field has been set, false otherwise.
      */
    public boolean hasLinkDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'linkDate' field.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder clearLinkDate() {
      linkDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkSequenceNumber' field.
      * @return The value.
      */
    public java.lang.Integer getLinkSequenceNumber() {
      return linkSequenceNumber;
    }

    /**
      * Sets the value of the 'linkSequenceNumber' field.
      * @param value The value of 'linkSequenceNumber'.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder setLinkSequenceNumber(int value) {
      validate(fields()[3], value);
      this.linkSequenceNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'linkSequenceNumber' field has been set.
      * @return True if the 'linkSequenceNumber' field has been set, false otherwise.
      */
    public boolean hasLinkSequenceNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'linkSequenceNumber' field.
      * @return This builder.
      */
    public com.acme.avro.transactionLink.Builder clearLinkSequenceNumber() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public transactionLink build() {
      try {
        transactionLink record = new transactionLink();
        record.linkStoreId = fieldSetFlags()[0] ? this.linkStoreId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.linkWorkstationId = fieldSetFlags()[1] ? this.linkWorkstationId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.linkDate = fieldSetFlags()[2] ? this.linkDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.linkSequenceNumber = fieldSetFlags()[3] ? this.linkSequenceNumber : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<transactionLink>
    WRITER$ = (org.apache.avro.io.DatumWriter<transactionLink>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<transactionLink>
    READER$ = (org.apache.avro.io.DatumReader<transactionLink>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
