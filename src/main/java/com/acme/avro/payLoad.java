/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.acme.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class payLoad extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4793984635681724186L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"payLoad\",\"namespace\":\"com.acme.avro\",\"fields\":[{\"name\":\"workstationId\",\"type\":\"string\"},{\"name\":\"sequenceNumber\",\"type\":\"int\"},{\"name\":\"transaction\",\"type\":{\"type\":\"record\",\"name\":\"transaction\",\"fields\":[{\"name\":\"lineItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"lineItems_record\",\"fields\":[{\"name\":\"lineTransType\",\"type\":\"string\"},{\"name\":\"lineType\",\"type\":\"string\"},{\"name\":\"lineSeq\",\"type\":\"int\"},{\"name\":\"posItemId\",\"type\":\"string\"},{\"name\":\"eanNumber\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"jsItemFlag\",\"type\":\"string\"},{\"name\":\"unitPrice\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"string\"},{\"name\":\"uom\",\"type\":\"string\"},{\"name\":\"extendedValue\",\"type\":\"string\"},{\"name\":\"returnCode\",\"type\":\"string\"},{\"name\":\"priceModifier\",\"type\":{\"type\":\"record\",\"name\":\"priceModifier\",\"fields\":[{\"name\":\"promotionCode\",\"type\":\"string\"},{\"name\":\"partnerCode\",\"type\":\"string\"},{\"name\":\"promotionDiscount\",\"type\":\"string\"},{\"name\":\"staffDiscount\",\"type\":\"string\"},{\"name\":\"newPrice\",\"type\":\"string\"},{\"name\":\"promotionType\",\"type\":\"string\"},{\"name\":\"promotionDescription\",\"type\":\"string\"}]}},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"consumableGroup\",\"type\":\"string\"},{\"name\":\"hierarchy\",\"type\":{\"type\":\"record\",\"name\":\"hierarchy\",\"fields\":[{\"name\":\"groupId\",\"type\":\"string\"},{\"name\":\"subcategoryId\",\"type\":\"string\"},{\"name\":\"categoryId\",\"type\":\"string\"}]}},{\"name\":\"scanData\",\"type\":\"string\"},{\"name\":\"startDateTime\",\"type\":\"string\"},{\"name\":\"endDateTime\",\"type\":\"string\"}]}}},{\"name\":\"tenderTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"tenderTypes_record\",\"fields\":[{\"name\":\"tenderType\",\"type\":\"string\"},{\"name\":\"lineSeq\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"string\"},{\"name\":\"startDateTime\",\"type\":\"string\"},{\"name\":\"endDateTime\",\"type\":\"string\"}]}}},{\"name\":\"promotionRedemption\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"promotionRedemption_record\",\"fields\":[{\"name\":\"promotionCode\",\"type\":\"string\"},{\"name\":\"partnerCode\",\"type\":\"string\"},{\"name\":\"redemptionQuantity\",\"type\":\"int\"}]}}}]}},{\"name\":\"tradingDayDate\",\"type\":\"string\"},{\"name\":\"customerLoyalty\",\"type\":{\"type\":\"record\",\"name\":\"customerLoyalty\",\"fields\":[{\"name\":\"nectarCard\",\"type\":\"string\"},{\"name\":\"issueNo\",\"type\":\"string\"},{\"name\":\"pointsAward\",\"type\":\"int\"},{\"name\":\"includesBonus\",\"type\":\"int\"}]}},{\"name\":\"staffDiscount\",\"type\":{\"type\":\"record\",\"name\":\"staffDiscount\",\"fields\":[{\"name\":\"staffDiscountCard\",\"type\":\"string\"},{\"name\":\"qualifyingSpend\",\"type\":\"string\"},{\"name\":\"discountRate\",\"type\":\"string\"}]}},{\"name\":\"transactionLink\",\"type\":{\"type\":\"record\",\"name\":\"transactionLink\",\"fields\":[{\"name\":\"linkStoreId\",\"type\":\"string\"},{\"name\":\"linkWorkstationId\",\"type\":\"string\"},{\"name\":\"linkDate\",\"type\":\"string\"},{\"name\":\"linkSequenceNumber\",\"type\":\"int\"}]}},{\"name\":\"totalvalue\",\"type\":\"string\"},{\"name\":\"totalGrossAmount\",\"type\":\"string\"},{\"name\":\"totalNetAmount\",\"type\":\"string\"},{\"name\":\"totalQuantity\",\"type\":\"string\"},{\"name\":\"startTransDateTime\",\"type\":\"string\"},{\"name\":\"endTransDateTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<payLoad> ENCODER =
      new BinaryMessageEncoder<payLoad>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<payLoad> DECODER =
      new BinaryMessageDecoder<payLoad>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<payLoad> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<payLoad> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<payLoad>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this payLoad to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a payLoad from a ByteBuffer. */
  public static payLoad fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence workstationId;
  @Deprecated public int sequenceNumber;
  @Deprecated public com.acme.avro.transaction transaction;
  @Deprecated public java.lang.CharSequence tradingDayDate;
  @Deprecated public com.acme.avro.customerLoyalty customerLoyalty;
  @Deprecated public com.acme.avro.staffDiscount staffDiscount;
  @Deprecated public com.acme.avro.transactionLink transactionLink;
  @Deprecated public java.lang.CharSequence totalvalue;
  @Deprecated public java.lang.CharSequence totalGrossAmount;
  @Deprecated public java.lang.CharSequence totalNetAmount;
  @Deprecated public java.lang.CharSequence totalQuantity;
  @Deprecated public java.lang.CharSequence startTransDateTime;
  @Deprecated public java.lang.CharSequence endTransDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public payLoad() {}

  /**
   * All-args constructor.
   * @param workstationId The new value for workstationId
   * @param sequenceNumber The new value for sequenceNumber
   * @param transaction The new value for transaction
   * @param tradingDayDate The new value for tradingDayDate
   * @param customerLoyalty The new value for customerLoyalty
   * @param staffDiscount The new value for staffDiscount
   * @param transactionLink The new value for transactionLink
   * @param totalvalue The new value for totalvalue
   * @param totalGrossAmount The new value for totalGrossAmount
   * @param totalNetAmount The new value for totalNetAmount
   * @param totalQuantity The new value for totalQuantity
   * @param startTransDateTime The new value for startTransDateTime
   * @param endTransDateTime The new value for endTransDateTime
   */
  public payLoad(java.lang.CharSequence workstationId, java.lang.Integer sequenceNumber, com.acme.avro.transaction transaction, java.lang.CharSequence tradingDayDate, com.acme.avro.customerLoyalty customerLoyalty, com.acme.avro.staffDiscount staffDiscount, com.acme.avro.transactionLink transactionLink, java.lang.CharSequence totalvalue, java.lang.CharSequence totalGrossAmount, java.lang.CharSequence totalNetAmount, java.lang.CharSequence totalQuantity, java.lang.CharSequence startTransDateTime, java.lang.CharSequence endTransDateTime) {
    this.workstationId = workstationId;
    this.sequenceNumber = sequenceNumber;
    this.transaction = transaction;
    this.tradingDayDate = tradingDayDate;
    this.customerLoyalty = customerLoyalty;
    this.staffDiscount = staffDiscount;
    this.transactionLink = transactionLink;
    this.totalvalue = totalvalue;
    this.totalGrossAmount = totalGrossAmount;
    this.totalNetAmount = totalNetAmount;
    this.totalQuantity = totalQuantity;
    this.startTransDateTime = startTransDateTime;
    this.endTransDateTime = endTransDateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return workstationId;
    case 1: return sequenceNumber;
    case 2: return transaction;
    case 3: return tradingDayDate;
    case 4: return customerLoyalty;
    case 5: return staffDiscount;
    case 6: return transactionLink;
    case 7: return totalvalue;
    case 8: return totalGrossAmount;
    case 9: return totalNetAmount;
    case 10: return totalQuantity;
    case 11: return startTransDateTime;
    case 12: return endTransDateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: workstationId = (java.lang.CharSequence)value$; break;
    case 1: sequenceNumber = (java.lang.Integer)value$; break;
    case 2: transaction = (com.acme.avro.transaction)value$; break;
    case 3: tradingDayDate = (java.lang.CharSequence)value$; break;
    case 4: customerLoyalty = (com.acme.avro.customerLoyalty)value$; break;
    case 5: staffDiscount = (com.acme.avro.staffDiscount)value$; break;
    case 6: transactionLink = (com.acme.avro.transactionLink)value$; break;
    case 7: totalvalue = (java.lang.CharSequence)value$; break;
    case 8: totalGrossAmount = (java.lang.CharSequence)value$; break;
    case 9: totalNetAmount = (java.lang.CharSequence)value$; break;
    case 10: totalQuantity = (java.lang.CharSequence)value$; break;
    case 11: startTransDateTime = (java.lang.CharSequence)value$; break;
    case 12: endTransDateTime = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'workstationId' field.
   * @return The value of the 'workstationId' field.
   */
  public java.lang.CharSequence getWorkstationId() {
    return workstationId;
  }

  /**
   * Sets the value of the 'workstationId' field.
   * @param value the value to set.
   */
  public void setWorkstationId(java.lang.CharSequence value) {
    this.workstationId = value;
  }

  /**
   * Gets the value of the 'sequenceNumber' field.
   * @return The value of the 'sequenceNumber' field.
   */
  public java.lang.Integer getSequenceNumber() {
    return sequenceNumber;
  }

  /**
   * Sets the value of the 'sequenceNumber' field.
   * @param value the value to set.
   */
  public void setSequenceNumber(java.lang.Integer value) {
    this.sequenceNumber = value;
  }

  /**
   * Gets the value of the 'transaction' field.
   * @return The value of the 'transaction' field.
   */
  public com.acme.avro.transaction getTransaction() {
    return transaction;
  }

  /**
   * Sets the value of the 'transaction' field.
   * @param value the value to set.
   */
  public void setTransaction(com.acme.avro.transaction value) {
    this.transaction = value;
  }

  /**
   * Gets the value of the 'tradingDayDate' field.
   * @return The value of the 'tradingDayDate' field.
   */
  public java.lang.CharSequence getTradingDayDate() {
    return tradingDayDate;
  }

  /**
   * Sets the value of the 'tradingDayDate' field.
   * @param value the value to set.
   */
  public void setTradingDayDate(java.lang.CharSequence value) {
    this.tradingDayDate = value;
  }

  /**
   * Gets the value of the 'customerLoyalty' field.
   * @return The value of the 'customerLoyalty' field.
   */
  public com.acme.avro.customerLoyalty getCustomerLoyalty() {
    return customerLoyalty;
  }

  /**
   * Sets the value of the 'customerLoyalty' field.
   * @param value the value to set.
   */
  public void setCustomerLoyalty(com.acme.avro.customerLoyalty value) {
    this.customerLoyalty = value;
  }

  /**
   * Gets the value of the 'staffDiscount' field.
   * @return The value of the 'staffDiscount' field.
   */
  public com.acme.avro.staffDiscount getStaffDiscount() {
    return staffDiscount;
  }

  /**
   * Sets the value of the 'staffDiscount' field.
   * @param value the value to set.
   */
  public void setStaffDiscount(com.acme.avro.staffDiscount value) {
    this.staffDiscount = value;
  }

  /**
   * Gets the value of the 'transactionLink' field.
   * @return The value of the 'transactionLink' field.
   */
  public com.acme.avro.transactionLink getTransactionLink() {
    return transactionLink;
  }

  /**
   * Sets the value of the 'transactionLink' field.
   * @param value the value to set.
   */
  public void setTransactionLink(com.acme.avro.transactionLink value) {
    this.transactionLink = value;
  }

  /**
   * Gets the value of the 'totalvalue' field.
   * @return The value of the 'totalvalue' field.
   */
  public java.lang.CharSequence getTotalvalue() {
    return totalvalue;
  }

  /**
   * Sets the value of the 'totalvalue' field.
   * @param value the value to set.
   */
  public void setTotalvalue(java.lang.CharSequence value) {
    this.totalvalue = value;
  }

  /**
   * Gets the value of the 'totalGrossAmount' field.
   * @return The value of the 'totalGrossAmount' field.
   */
  public java.lang.CharSequence getTotalGrossAmount() {
    return totalGrossAmount;
  }

  /**
   * Sets the value of the 'totalGrossAmount' field.
   * @param value the value to set.
   */
  public void setTotalGrossAmount(java.lang.CharSequence value) {
    this.totalGrossAmount = value;
  }

  /**
   * Gets the value of the 'totalNetAmount' field.
   * @return The value of the 'totalNetAmount' field.
   */
  public java.lang.CharSequence getTotalNetAmount() {
    return totalNetAmount;
  }

  /**
   * Sets the value of the 'totalNetAmount' field.
   * @param value the value to set.
   */
  public void setTotalNetAmount(java.lang.CharSequence value) {
    this.totalNetAmount = value;
  }

  /**
   * Gets the value of the 'totalQuantity' field.
   * @return The value of the 'totalQuantity' field.
   */
  public java.lang.CharSequence getTotalQuantity() {
    return totalQuantity;
  }

  /**
   * Sets the value of the 'totalQuantity' field.
   * @param value the value to set.
   */
  public void setTotalQuantity(java.lang.CharSequence value) {
    this.totalQuantity = value;
  }

  /**
   * Gets the value of the 'startTransDateTime' field.
   * @return The value of the 'startTransDateTime' field.
   */
  public java.lang.CharSequence getStartTransDateTime() {
    return startTransDateTime;
  }

  /**
   * Sets the value of the 'startTransDateTime' field.
   * @param value the value to set.
   */
  public void setStartTransDateTime(java.lang.CharSequence value) {
    this.startTransDateTime = value;
  }

  /**
   * Gets the value of the 'endTransDateTime' field.
   * @return The value of the 'endTransDateTime' field.
   */
  public java.lang.CharSequence getEndTransDateTime() {
    return endTransDateTime;
  }

  /**
   * Sets the value of the 'endTransDateTime' field.
   * @param value the value to set.
   */
  public void setEndTransDateTime(java.lang.CharSequence value) {
    this.endTransDateTime = value;
  }

  /**
   * Creates a new payLoad RecordBuilder.
   * @return A new payLoad RecordBuilder
   */
  public static com.acme.avro.payLoad.Builder newBuilder() {
    return new com.acme.avro.payLoad.Builder();
  }

  /**
   * Creates a new payLoad RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new payLoad RecordBuilder
   */
  public static com.acme.avro.payLoad.Builder newBuilder(com.acme.avro.payLoad.Builder other) {
    return new com.acme.avro.payLoad.Builder(other);
  }

  /**
   * Creates a new payLoad RecordBuilder by copying an existing payLoad instance.
   * @param other The existing instance to copy.
   * @return A new payLoad RecordBuilder
   */
  public static com.acme.avro.payLoad.Builder newBuilder(com.acme.avro.payLoad other) {
    return new com.acme.avro.payLoad.Builder(other);
  }

  /**
   * RecordBuilder for payLoad instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<payLoad>
    implements org.apache.avro.data.RecordBuilder<payLoad> {

    private java.lang.CharSequence workstationId;
    private int sequenceNumber;
    private com.acme.avro.transaction transaction;
    private com.acme.avro.transaction.Builder transactionBuilder;
    private java.lang.CharSequence tradingDayDate;
    private com.acme.avro.customerLoyalty customerLoyalty;
    private com.acme.avro.customerLoyalty.Builder customerLoyaltyBuilder;
    private com.acme.avro.staffDiscount staffDiscount;
    private com.acme.avro.staffDiscount.Builder staffDiscountBuilder;
    private com.acme.avro.transactionLink transactionLink;
    private com.acme.avro.transactionLink.Builder transactionLinkBuilder;
    private java.lang.CharSequence totalvalue;
    private java.lang.CharSequence totalGrossAmount;
    private java.lang.CharSequence totalNetAmount;
    private java.lang.CharSequence totalQuantity;
    private java.lang.CharSequence startTransDateTime;
    private java.lang.CharSequence endTransDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.acme.avro.payLoad.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.workstationId)) {
        this.workstationId = data().deepCopy(fields()[0].schema(), other.workstationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[1].schema(), other.sequenceNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transaction)) {
        this.transaction = data().deepCopy(fields()[2].schema(), other.transaction);
        fieldSetFlags()[2] = true;
      }
      if (other.hasTransactionBuilder()) {
        this.transactionBuilder = com.acme.avro.transaction.newBuilder(other.getTransactionBuilder());
      }
      if (isValidValue(fields()[3], other.tradingDayDate)) {
        this.tradingDayDate = data().deepCopy(fields()[3].schema(), other.tradingDayDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customerLoyalty)) {
        this.customerLoyalty = data().deepCopy(fields()[4].schema(), other.customerLoyalty);
        fieldSetFlags()[4] = true;
      }
      if (other.hasCustomerLoyaltyBuilder()) {
        this.customerLoyaltyBuilder = com.acme.avro.customerLoyalty.newBuilder(other.getCustomerLoyaltyBuilder());
      }
      if (isValidValue(fields()[5], other.staffDiscount)) {
        this.staffDiscount = data().deepCopy(fields()[5].schema(), other.staffDiscount);
        fieldSetFlags()[5] = true;
      }
      if (other.hasStaffDiscountBuilder()) {
        this.staffDiscountBuilder = com.acme.avro.staffDiscount.newBuilder(other.getStaffDiscountBuilder());
      }
      if (isValidValue(fields()[6], other.transactionLink)) {
        this.transactionLink = data().deepCopy(fields()[6].schema(), other.transactionLink);
        fieldSetFlags()[6] = true;
      }
      if (other.hasTransactionLinkBuilder()) {
        this.transactionLinkBuilder = com.acme.avro.transactionLink.newBuilder(other.getTransactionLinkBuilder());
      }
      if (isValidValue(fields()[7], other.totalvalue)) {
        this.totalvalue = data().deepCopy(fields()[7].schema(), other.totalvalue);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.totalGrossAmount)) {
        this.totalGrossAmount = data().deepCopy(fields()[8].schema(), other.totalGrossAmount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalNetAmount)) {
        this.totalNetAmount = data().deepCopy(fields()[9].schema(), other.totalNetAmount);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.totalQuantity)) {
        this.totalQuantity = data().deepCopy(fields()[10].schema(), other.totalQuantity);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.startTransDateTime)) {
        this.startTransDateTime = data().deepCopy(fields()[11].schema(), other.startTransDateTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.endTransDateTime)) {
        this.endTransDateTime = data().deepCopy(fields()[12].schema(), other.endTransDateTime);
        fieldSetFlags()[12] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing payLoad instance
     * @param other The existing instance to copy.
     */
    private Builder(com.acme.avro.payLoad other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.workstationId)) {
        this.workstationId = data().deepCopy(fields()[0].schema(), other.workstationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[1].schema(), other.sequenceNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transaction)) {
        this.transaction = data().deepCopy(fields()[2].schema(), other.transaction);
        fieldSetFlags()[2] = true;
      }
      this.transactionBuilder = null;
      if (isValidValue(fields()[3], other.tradingDayDate)) {
        this.tradingDayDate = data().deepCopy(fields()[3].schema(), other.tradingDayDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customerLoyalty)) {
        this.customerLoyalty = data().deepCopy(fields()[4].schema(), other.customerLoyalty);
        fieldSetFlags()[4] = true;
      }
      this.customerLoyaltyBuilder = null;
      if (isValidValue(fields()[5], other.staffDiscount)) {
        this.staffDiscount = data().deepCopy(fields()[5].schema(), other.staffDiscount);
        fieldSetFlags()[5] = true;
      }
      this.staffDiscountBuilder = null;
      if (isValidValue(fields()[6], other.transactionLink)) {
        this.transactionLink = data().deepCopy(fields()[6].schema(), other.transactionLink);
        fieldSetFlags()[6] = true;
      }
      this.transactionLinkBuilder = null;
      if (isValidValue(fields()[7], other.totalvalue)) {
        this.totalvalue = data().deepCopy(fields()[7].schema(), other.totalvalue);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.totalGrossAmount)) {
        this.totalGrossAmount = data().deepCopy(fields()[8].schema(), other.totalGrossAmount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalNetAmount)) {
        this.totalNetAmount = data().deepCopy(fields()[9].schema(), other.totalNetAmount);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.totalQuantity)) {
        this.totalQuantity = data().deepCopy(fields()[10].schema(), other.totalQuantity);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.startTransDateTime)) {
        this.startTransDateTime = data().deepCopy(fields()[11].schema(), other.startTransDateTime);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.endTransDateTime)) {
        this.endTransDateTime = data().deepCopy(fields()[12].schema(), other.endTransDateTime);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'workstationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getWorkstationId() {
      return workstationId;
    }

    /**
      * Sets the value of the 'workstationId' field.
      * @param value The value of 'workstationId'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setWorkstationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.workstationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'workstationId' field has been set.
      * @return True if the 'workstationId' field has been set, false otherwise.
      */
    public boolean hasWorkstationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'workstationId' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearWorkstationId() {
      workstationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequenceNumber' field.
      * @return The value.
      */
    public java.lang.Integer getSequenceNumber() {
      return sequenceNumber;
    }

    /**
      * Sets the value of the 'sequenceNumber' field.
      * @param value The value of 'sequenceNumber'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setSequenceNumber(int value) {
      validate(fields()[1], value);
      this.sequenceNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sequenceNumber' field has been set.
      * @return True if the 'sequenceNumber' field has been set, false otherwise.
      */
    public boolean hasSequenceNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sequenceNumber' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearSequenceNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction' field.
      * @return The value.
      */
    public com.acme.avro.transaction getTransaction() {
      return transaction;
    }

    /**
      * Sets the value of the 'transaction' field.
      * @param value The value of 'transaction'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setTransaction(com.acme.avro.transaction value) {
      validate(fields()[2], value);
      this.transactionBuilder = null;
      this.transaction = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction' field has been set.
      * @return True if the 'transaction' field has been set, false otherwise.
      */
    public boolean hasTransaction() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'transaction' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.transaction.Builder getTransactionBuilder() {
      if (transactionBuilder == null) {
        if (hasTransaction()) {
          setTransactionBuilder(com.acme.avro.transaction.newBuilder(transaction));
        } else {
          setTransactionBuilder(com.acme.avro.transaction.newBuilder());
        }
      }
      return transactionBuilder;
    }

    /**
     * Sets the Builder instance for the 'transaction' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.avro.payLoad.Builder setTransactionBuilder(com.acme.avro.transaction.Builder value) {
      clearTransaction();
      transactionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transaction' field has an active Builder instance
     * @return True if the 'transaction' field has an active Builder instance
     */
    public boolean hasTransactionBuilder() {
      return transactionBuilder != null;
    }

    /**
      * Clears the value of the 'transaction' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearTransaction() {
      transaction = null;
      transactionBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradingDayDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getTradingDayDate() {
      return tradingDayDate;
    }

    /**
      * Sets the value of the 'tradingDayDate' field.
      * @param value The value of 'tradingDayDate'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setTradingDayDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tradingDayDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tradingDayDate' field has been set.
      * @return True if the 'tradingDayDate' field has been set, false otherwise.
      */
    public boolean hasTradingDayDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tradingDayDate' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearTradingDayDate() {
      tradingDayDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerLoyalty' field.
      * @return The value.
      */
    public com.acme.avro.customerLoyalty getCustomerLoyalty() {
      return customerLoyalty;
    }

    /**
      * Sets the value of the 'customerLoyalty' field.
      * @param value The value of 'customerLoyalty'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setCustomerLoyalty(com.acme.avro.customerLoyalty value) {
      validate(fields()[4], value);
      this.customerLoyaltyBuilder = null;
      this.customerLoyalty = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'customerLoyalty' field has been set.
      * @return True if the 'customerLoyalty' field has been set, false otherwise.
      */
    public boolean hasCustomerLoyalty() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'customerLoyalty' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.customerLoyalty.Builder getCustomerLoyaltyBuilder() {
      if (customerLoyaltyBuilder == null) {
        if (hasCustomerLoyalty()) {
          setCustomerLoyaltyBuilder(com.acme.avro.customerLoyalty.newBuilder(customerLoyalty));
        } else {
          setCustomerLoyaltyBuilder(com.acme.avro.customerLoyalty.newBuilder());
        }
      }
      return customerLoyaltyBuilder;
    }

    /**
     * Sets the Builder instance for the 'customerLoyalty' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.avro.payLoad.Builder setCustomerLoyaltyBuilder(com.acme.avro.customerLoyalty.Builder value) {
      clearCustomerLoyalty();
      customerLoyaltyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customerLoyalty' field has an active Builder instance
     * @return True if the 'customerLoyalty' field has an active Builder instance
     */
    public boolean hasCustomerLoyaltyBuilder() {
      return customerLoyaltyBuilder != null;
    }

    /**
      * Clears the value of the 'customerLoyalty' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearCustomerLoyalty() {
      customerLoyalty = null;
      customerLoyaltyBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'staffDiscount' field.
      * @return The value.
      */
    public com.acme.avro.staffDiscount getStaffDiscount() {
      return staffDiscount;
    }

    /**
      * Sets the value of the 'staffDiscount' field.
      * @param value The value of 'staffDiscount'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setStaffDiscount(com.acme.avro.staffDiscount value) {
      validate(fields()[5], value);
      this.staffDiscountBuilder = null;
      this.staffDiscount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'staffDiscount' field has been set.
      * @return True if the 'staffDiscount' field has been set, false otherwise.
      */
    public boolean hasStaffDiscount() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'staffDiscount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.staffDiscount.Builder getStaffDiscountBuilder() {
      if (staffDiscountBuilder == null) {
        if (hasStaffDiscount()) {
          setStaffDiscountBuilder(com.acme.avro.staffDiscount.newBuilder(staffDiscount));
        } else {
          setStaffDiscountBuilder(com.acme.avro.staffDiscount.newBuilder());
        }
      }
      return staffDiscountBuilder;
    }

    /**
     * Sets the Builder instance for the 'staffDiscount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.avro.payLoad.Builder setStaffDiscountBuilder(com.acme.avro.staffDiscount.Builder value) {
      clearStaffDiscount();
      staffDiscountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'staffDiscount' field has an active Builder instance
     * @return True if the 'staffDiscount' field has an active Builder instance
     */
    public boolean hasStaffDiscountBuilder() {
      return staffDiscountBuilder != null;
    }

    /**
      * Clears the value of the 'staffDiscount' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearStaffDiscount() {
      staffDiscount = null;
      staffDiscountBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionLink' field.
      * @return The value.
      */
    public com.acme.avro.transactionLink getTransactionLink() {
      return transactionLink;
    }

    /**
      * Sets the value of the 'transactionLink' field.
      * @param value The value of 'transactionLink'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setTransactionLink(com.acme.avro.transactionLink value) {
      validate(fields()[6], value);
      this.transactionLinkBuilder = null;
      this.transactionLink = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionLink' field has been set.
      * @return True if the 'transactionLink' field has been set, false otherwise.
      */
    public boolean hasTransactionLink() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'transactionLink' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.transactionLink.Builder getTransactionLinkBuilder() {
      if (transactionLinkBuilder == null) {
        if (hasTransactionLink()) {
          setTransactionLinkBuilder(com.acme.avro.transactionLink.newBuilder(transactionLink));
        } else {
          setTransactionLinkBuilder(com.acme.avro.transactionLink.newBuilder());
        }
      }
      return transactionLinkBuilder;
    }

    /**
     * Sets the Builder instance for the 'transactionLink' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.avro.payLoad.Builder setTransactionLinkBuilder(com.acme.avro.transactionLink.Builder value) {
      clearTransactionLink();
      transactionLinkBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'transactionLink' field has an active Builder instance
     * @return True if the 'transactionLink' field has an active Builder instance
     */
    public boolean hasTransactionLinkBuilder() {
      return transactionLinkBuilder != null;
    }

    /**
      * Clears the value of the 'transactionLink' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearTransactionLink() {
      transactionLink = null;
      transactionLinkBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalvalue' field.
      * @return The value.
      */
    public java.lang.CharSequence getTotalvalue() {
      return totalvalue;
    }

    /**
      * Sets the value of the 'totalvalue' field.
      * @param value The value of 'totalvalue'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setTotalvalue(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.totalvalue = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'totalvalue' field has been set.
      * @return True if the 'totalvalue' field has been set, false otherwise.
      */
    public boolean hasTotalvalue() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'totalvalue' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearTotalvalue() {
      totalvalue = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalGrossAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getTotalGrossAmount() {
      return totalGrossAmount;
    }

    /**
      * Sets the value of the 'totalGrossAmount' field.
      * @param value The value of 'totalGrossAmount'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setTotalGrossAmount(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.totalGrossAmount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'totalGrossAmount' field has been set.
      * @return True if the 'totalGrossAmount' field has been set, false otherwise.
      */
    public boolean hasTotalGrossAmount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'totalGrossAmount' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearTotalGrossAmount() {
      totalGrossAmount = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalNetAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getTotalNetAmount() {
      return totalNetAmount;
    }

    /**
      * Sets the value of the 'totalNetAmount' field.
      * @param value The value of 'totalNetAmount'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setTotalNetAmount(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.totalNetAmount = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'totalNetAmount' field has been set.
      * @return True if the 'totalNetAmount' field has been set, false otherwise.
      */
    public boolean hasTotalNetAmount() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'totalNetAmount' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearTotalNetAmount() {
      totalNetAmount = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalQuantity' field.
      * @return The value.
      */
    public java.lang.CharSequence getTotalQuantity() {
      return totalQuantity;
    }

    /**
      * Sets the value of the 'totalQuantity' field.
      * @param value The value of 'totalQuantity'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setTotalQuantity(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.totalQuantity = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'totalQuantity' field has been set.
      * @return True if the 'totalQuantity' field has been set, false otherwise.
      */
    public boolean hasTotalQuantity() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'totalQuantity' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearTotalQuantity() {
      totalQuantity = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTransDateTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getStartTransDateTime() {
      return startTransDateTime;
    }

    /**
      * Sets the value of the 'startTransDateTime' field.
      * @param value The value of 'startTransDateTime'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setStartTransDateTime(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.startTransDateTime = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'startTransDateTime' field has been set.
      * @return True if the 'startTransDateTime' field has been set, false otherwise.
      */
    public boolean hasStartTransDateTime() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'startTransDateTime' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearStartTransDateTime() {
      startTransDateTime = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTransDateTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getEndTransDateTime() {
      return endTransDateTime;
    }

    /**
      * Sets the value of the 'endTransDateTime' field.
      * @param value The value of 'endTransDateTime'.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder setEndTransDateTime(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.endTransDateTime = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'endTransDateTime' field has been set.
      * @return True if the 'endTransDateTime' field has been set, false otherwise.
      */
    public boolean hasEndTransDateTime() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'endTransDateTime' field.
      * @return This builder.
      */
    public com.acme.avro.payLoad.Builder clearEndTransDateTime() {
      endTransDateTime = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public payLoad build() {
      try {
        payLoad record = new payLoad();
        record.workstationId = fieldSetFlags()[0] ? this.workstationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sequenceNumber = fieldSetFlags()[1] ? this.sequenceNumber : (java.lang.Integer) defaultValue(fields()[1]);
        if (transactionBuilder != null) {
          record.transaction = this.transactionBuilder.build();
        } else {
          record.transaction = fieldSetFlags()[2] ? this.transaction : (com.acme.avro.transaction) defaultValue(fields()[2]);
        }
        record.tradingDayDate = fieldSetFlags()[3] ? this.tradingDayDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (customerLoyaltyBuilder != null) {
          record.customerLoyalty = this.customerLoyaltyBuilder.build();
        } else {
          record.customerLoyalty = fieldSetFlags()[4] ? this.customerLoyalty : (com.acme.avro.customerLoyalty) defaultValue(fields()[4]);
        }
        if (staffDiscountBuilder != null) {
          record.staffDiscount = this.staffDiscountBuilder.build();
        } else {
          record.staffDiscount = fieldSetFlags()[5] ? this.staffDiscount : (com.acme.avro.staffDiscount) defaultValue(fields()[5]);
        }
        if (transactionLinkBuilder != null) {
          record.transactionLink = this.transactionLinkBuilder.build();
        } else {
          record.transactionLink = fieldSetFlags()[6] ? this.transactionLink : (com.acme.avro.transactionLink) defaultValue(fields()[6]);
        }
        record.totalvalue = fieldSetFlags()[7] ? this.totalvalue : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.totalGrossAmount = fieldSetFlags()[8] ? this.totalGrossAmount : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.totalNetAmount = fieldSetFlags()[9] ? this.totalNetAmount : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.totalQuantity = fieldSetFlags()[10] ? this.totalQuantity : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.startTransDateTime = fieldSetFlags()[11] ? this.startTransDateTime : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.endTransDateTime = fieldSetFlags()[12] ? this.endTransDateTime : (java.lang.CharSequence) defaultValue(fields()[12]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<payLoad>
    WRITER$ = (org.apache.avro.io.DatumWriter<payLoad>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<payLoad>
    READER$ = (org.apache.avro.io.DatumReader<payLoad>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
